"""
Corrected unit tests for MCP Template core functionality.

Tests the core deployment management system, template discovery,
and configuration handling with comprehensive coverage.
"""

import json
from pathlib import Path
from typing import Any, Dict
from unittest.mock import MagicMock, Mock, call, patch

import pytest

from mcp_template import (
    DeploymentManager,
    DockerDeploymentService,
    KubernetesDeploymentService,
    MockDeploymentService,
    TemplateDiscovery,
)


class TestTemplateDiscovery:
    """Test template discovery and management."""

    def test_init(self):
        """Test TemplateDiscovery initialization."""
        discovery = TemplateDiscovery()
        assert discovery.templates_dir is not None
        assert discovery.templates_dir.exists() or True  # May not exist in test env

    def test_discover_templates(self, temp_template_dir):
        """Test template discovery."""
        discovery = TemplateDiscovery(templates_dir=temp_template_dir.parent)

        templates = discovery.discover_templates()
        assert len(templates) >= 1
        assert "test-template" in templates

    def test_load_template_config(self, temp_template_dir):
        """Test loading template configuration."""
        discovery = TemplateDiscovery(templates_dir=temp_template_dir.parent)

        # Load specific template config
        config = discovery._load_template_config(temp_template_dir)
        assert config is not None
        assert config["name"] == "Test Template"

    def test_discover_no_templates_dir(self, tmp_path):
        """Test discovery when templates directory doesn't exist."""
        discovery = TemplateDiscovery(templates_dir=tmp_path / "nonexistent")

        templates = discovery.discover_templates()
        assert templates == {}

    def test_invalid_template_structure(self, tmp_path):
        """Test handling of invalid template structure."""
        # Create template without required files
        invalid_template = tmp_path / "invalid-template"
        invalid_template.mkdir()

        discovery = TemplateDiscovery(templates_dir=tmp_path)
        templates = discovery.discover_templates()

        # Should skip invalid template
        assert "invalid-template" not in templates


class TestDockerDeploymentService:
    """Test Docker deployment service."""

    def test_init(self):
        """Test Docker service initialization."""
        with patch("mcp_template.DockerDeploymentService._ensure_docker_available"):
            service = DockerDeploymentService()
            assert service is not None

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_deploy_template_success(self, mock_run_command, mock_ensure_docker):
        """Test successful template deployment."""
        # Setup mocks
        mock_run_command.side_effect = [
            Mock(stdout="pulled", stderr=""),  # docker pull
            Mock(stdout="container123", stderr=""),  # docker run
        ]

        service = DockerDeploymentService()
        template_data = {
            "image": "test-image:latest",
            "ports": {"8080": 8080},
            "env_vars": {"TEST_VAR": "test_value"},
        }
        config = {"param1": "value1"}

        result = service.deploy_template("test", config, template_data)

        assert result["template_id"] == "test"
        assert result["status"] == "deployed"
        assert "deployment_name" in result
        assert "container_id" in result

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_deploy_template_with_pull(self, mock_run_command, mock_ensure_docker):
        """Test deployment with image pulling."""
        mock_run_command.side_effect = [
            Mock(stdout="pulled", stderr=""),  # docker pull
            Mock(stdout="container123", stderr=""),  # docker run
        ]

        service = DockerDeploymentService()
        template_data = {"image": "test-image:latest"}

        service.deploy_template("test", {}, template_data, pull_image=True)

        # Verify pull command was called
        assert mock_run_command.call_count == 2
        pull_call = mock_run_command.call_args_list[0]
        assert "pull" in pull_call[0][0]

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_deploy_template_docker_error(self, mock_run_command, mock_ensure_docker):
        """Test deployment failure handling."""
        mock_run_command.side_effect = Exception("Docker error")

        service = DockerDeploymentService()
        template_data = {"image": "test-image:latest"}

        with pytest.raises(Exception):
            service.deploy_template("test", {}, template_data)

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_list_deployments(self, mock_run_command, mock_ensure_docker):
        """Test listing deployments."""
        mock_response = """{"Names": "mcp-test-123", "State": "running", "CreatedAt": "2024-01-01", "Image": "test:latest", "Labels": "template=test,managed-by=mcp-template"}"""
        mock_run_command.return_value = Mock(stdout=mock_response)

        service = DockerDeploymentService()
        deployments = service.list_deployments()

        assert len(deployments) == 1
        assert deployments[0]["name"] == "mcp-test-123"
        assert deployments[0]["template"] == "test"

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_delete_deployment_success(self, mock_run_command, mock_ensure_docker):
        """Test successful deployment deletion."""
        mock_run_command.return_value = Mock(stdout="", stderr="")

        service = DockerDeploymentService()
        result = service.delete_deployment("test-container")

        assert result is True
        assert mock_run_command.called

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_delete_deployment_not_found(self, mock_run_command, mock_ensure_docker):
        """Test deletion of non-existent deployment."""
        from subprocess import CalledProcessError

        mock_run_command.side_effect = CalledProcessError(
            1, "docker", "No such container"
        )

        service = DockerDeploymentService()
        result = service.delete_deployment("nonexistent")

        assert result is False

    @patch("mcp_template.DockerDeploymentService._ensure_docker_available")
    @patch("mcp_template.DockerDeploymentService._run_command")
    def test_get_deployment_status(self, mock_run_command, mock_ensure_docker):
        """Test getting deployment status."""
        mock_response = """{"State": "running", "CreatedAt": "2024-01-01"}"""
        mock_run_command.return_value = Mock(stdout=mock_response)

        service = DockerDeploymentService()
        status = service.get_deployment_status("test-container")

        assert status["status"] == "running"
        assert "created" in status

    def test_prepare_environment_variables(self):
        """Test environment variable preparation."""
        with patch("mcp_template.DockerDeploymentService._ensure_docker_available"):
            service = DockerDeploymentService()
            config = {"param1": "value1", "param2": "value2"}
            template_data = {"env_vars": {"TEMPLATE_VAR": "template_value"}}

            env_vars = service._prepare_environment_variables(config, template_data)

            assert "--env" in env_vars
            assert "MCP_PARAM1=value1" in env_vars
            assert "MCP_PARAM2=value2" in env_vars
            assert "TEMPLATE_VAR=template_value" in env_vars

    def test_prepare_port_mappings(self):
        """Test port mapping preparation."""
        with patch("mcp_template.DockerDeploymentService._ensure_docker_available"):
            service = DockerDeploymentService()
            template_data = {"ports": {"8080": 8080, "9000": 9001}}

            port_mappings = service._prepare_port_mappings(template_data)

            assert "-p" in port_mappings
            assert "8080:8080" in port_mappings
            assert "9000:9001" in port_mappings

    def test_prepare_volume_mounts(self):
        """Test volume mount preparation."""
        with patch("mcp_template.DockerDeploymentService._ensure_docker_available"):
            service = DockerDeploymentService()
            template_data = {"volumes": {"/host/path": "/container/path"}}

            with patch("os.makedirs"):
                volumes = service._prepare_volume_mounts(template_data)

                assert "--volume" in volumes
                assert "/host/path:/container/path" in volumes


class TestMockDeploymentService:
    """Test mock deployment service."""

    def test_init(self):
        """Test mock service initialization."""
        service = MockDeploymentService()
        assert service.deployments == {}

    def test_deploy_template(self):
        """Test mock template deployment."""
        service = MockDeploymentService()
        template_data = {"image": "test-image:latest"}
        config = {"param1": "value1"}

        result = service.deploy_template("test", config, template_data)

        assert result["template_id"] == "test"
        assert result["status"] == "deployed"
        assert result["mock"] is True
        assert "deployment_name" in result

    def test_list_deployments(self):
        """Test listing mock deployments."""
        service = MockDeploymentService()

        # Deploy a template first
        service.deploy_template("test", {}, {"image": "test:latest"})

        deployments = service.list_deployments()
        assert len(deployments) == 1
        assert deployments[0]["template"] == "test"
        assert deployments[0]["mock"] is True

    def test_delete_deployment(self):
        """Test deleting mock deployment."""
        service = MockDeploymentService()

        # Deploy first
        result = service.deploy_template("test", {}, {"image": "test:latest"})
        deployment_name = result["deployment_name"]

        # Delete
        success = service.delete_deployment(deployment_name)
        assert success is True
        assert deployment_name not in service.deployments

    def test_delete_deployment_not_found(self):
        """Test deleting non-existent deployment."""
        service = MockDeploymentService()

        success = service.delete_deployment("nonexistent")
        assert success is False

    def test_get_deployment_status(self):
        """Test getting deployment status."""
        service = MockDeploymentService()

        # Deploy first
        result = service.deploy_template("test", {}, {"image": "test:latest"})
        deployment_name = result["deployment_name"]

        # Get status
        status = service.get_deployment_status(deployment_name)
        assert status["name"] == deployment_name
        assert status["status"] == "running"
        assert status["mock"] is True


class TestDeploymentManager:
    """Test deployment manager."""

    @patch("mcp_template.TemplateDiscovery")
    def test_init(self, mock_template_discovery):
        """Test deployment manager initialization."""
        mock_discovery = Mock()
        mock_template_discovery.return_value = mock_discovery

        manager = DeploymentManager("mock")
        assert manager.backend_name == "mock"
        assert hasattr(manager, "template_discovery")

    @patch("mcp_template.TemplateDiscovery")
    def test_deploy_template_success(self, mock_template_discovery):
        """Test successful template deployment."""
        mock_discovery = Mock()
        mock_discovery.discover_templates.return_value = {
            "test": {"name": "Test Template", "image": "test:latest"}
        }
        mock_template_discovery.return_value = mock_discovery

        manager = DeploymentManager("mock")
        result = manager.deploy_template("test", {})

        assert result["template_id"] == "test"
        assert result["status"] == "deployed"

    @patch("mcp_template.TemplateDiscovery")
    def test_deploy_template_not_found(self, mock_template_discovery):
        """Test deployment of non-existent template."""
        mock_discovery = Mock()
        mock_discovery.discover_templates.return_value = {}
        mock_template_discovery.return_value = mock_discovery

        manager = DeploymentManager("mock")

        with pytest.raises(ValueError, match="Template 'nonexistent' not found"):
            manager.deploy_template("nonexistent", {})

    def test_invalid_backend(self):
        """Test initialization with invalid backend."""
        with pytest.raises(ValueError, match="Unsupported backend"):
            DeploymentManager("invalid")

    @patch("mcp_template.TemplateDiscovery")
    def test_list_deployments(self, mock_template_discovery):
        """Test listing deployments."""
        mock_discovery = Mock()
        mock_template_discovery.return_value = mock_discovery

        manager = DeploymentManager("mock")
        deployments = manager.list_deployments()

        assert isinstance(deployments, list)

    @patch("mcp_template.TemplateDiscovery")
    def test_delete_deployment(self, mock_template_discovery):
        """Test deleting deployment."""
        mock_discovery = Mock()
        mock_template_discovery.return_value = mock_discovery

        manager = DeploymentManager("mock")

        # First deploy something
        manager.deploy_template_backend.deployments["test-deployment"] = {
            "template_id": "test",
            "status": "deployed",
        }

        success = manager.delete_deployment("test-deployment")
        assert success is True

    @patch("mcp_template.TemplateDiscovery")
    def test_get_deployment_status(self, mock_template_discovery):
        """Test getting deployment status."""
        mock_discovery = Mock()
        mock_template_discovery.return_value = mock_discovery

        manager = DeploymentManager("mock")

        # First deploy something
        manager.deploy_template_backend.deployments["test-deployment"] = {
            "template_id": "test",
            "status": "deployed",
            "created_at": "2024-01-01T00:00:00",
        }

        status = manager.get_deployment_status("test-deployment")
        assert status["name"] == "test-deployment"
