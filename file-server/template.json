{
  "name": "File Server MCP",
  "description": "Secure file system access for AI assistants using the official MCP filesystem server with additional platform integration and configuration options.",
  "version": "1.0.0",
  "author": "MCP Platform",
  "category": "Utilities",
  "tags": ["filesystem", "files", "storage", "security", "utilities"],
  
  "base_server": "@modelcontextprotocol/server-filesystem",
  "base_version": "latest",
  "docker_image": "mcpplatform/file-server",
  "docker_tag": "latest",
  
  "config_schema": {
    "type": "object",
    "properties": {
      "allowed_directories": {
        "type": "array",
        "title": "Allowed Directories",
        "description": "List of directories the server can access. Paths will be mounted and validated for security.",
        "items": {"type": "string"},
        "default": ["/data"]
      },
      "read_only_mode": {
        "type": "boolean",
        "title": "Read-Only Mode",
        "description": "Enable read-only mode to prevent any file modifications",
        "default": false
      },
      "enable_symlinks": {
        "type": "boolean",
        "title": "Enable Symlink Resolution",
        "description": "Allow following symbolic links (with security validation)",
        "default": true
      },
      "max_file_size": {
        "type": "integer",
        "title": "Max File Size (MB)",
        "description": "Maximum file size for read operations in megabytes",
        "default": 100,
        "minimum": 1,
        "maximum": 1000
      },
      "exclude_patterns": {
        "type": "array",
        "title": "Exclude Patterns",
        "description": "Glob patterns for files/directories to exclude from operations",
        "items": {"type": "string"},
        "default": ["**/.git/**", "**/node_modules/**", "**/.env*"]
      }
    },
    "required": ["allowed_directories"]
  },
  
  "capabilities": [
    {
      "name": "File Operations",
      "description": "Read, write, and edit files with security validation",
      "example": "Read configuration files, create documents, update source code"
    },
    {
      "name": "Directory Management",
      "description": "List, create, and navigate directory structures",
      "example": "Browse project folders, create new directories, organize files"
    },
    {
      "name": "File Search",
      "description": "Search for files by name, extension, or content patterns",
      "example": "Find all .js files, locate configuration files, search by content"
    },
    {
      "name": "Security & Validation",
      "description": "Path traversal protection and security validation",
      "example": "Prevent access to system files, validate file paths, enforce permissions"
    }
  ],
  
  "tools": [
    {
      "name": "read_file",
      "description": "Read complete contents of a file with support for head/tail operations",
      "parameters": [
        {"name": "path", "description": "File path to read", "required": true},
        {"name": "encoding", "description": "File encoding (default: utf-8)", "required": false}
      ]
    },
    {
      "name": "write_file",
      "description": "Create new file or overwrite existing with security checks",
      "parameters": [
        {"name": "path", "description": "File path to write", "required": true},
        {"name": "content", "description": "File content", "required": true},
        {"name": "mode", "description": "File permissions (default: 644)", "required": false}
      ]
    },
    {
      "name": "list_directory",
      "description": "List directory contents with file type indicators",
      "parameters": [
        {"name": "path", "description": "Directory path to list", "required": true},
        {"name": "recursive", "description": "Include subdirectories", "required": false}
      ]
    },
    {
      "name": "search_files",
      "description": "Recursively search for files matching patterns with exclusion support",
      "parameters": [
        {"name": "pattern", "description": "Search pattern or glob", "required": true},
        {"name": "path", "description": "Search root path", "required": false},
        {"name": "exclude", "description": "Exclusion patterns", "required": false}
      ]
    }
  ],
  
  "ports": [
    {
      "container": 8000,
      "description": "MCP server stdio interface (typically not exposed)"
    }
  ],
  
  "volumes": [
    {
      "mount": "/data",
      "description": "Primary file storage directory"
    },
    {
      "mount": "/workspace", 
      "description": "Additional workspace directory (optional)"
    }
  ],
  
  "environment_variables": {
    "NODE_ENV": "production",
    "MCP_ALLOWED_DIRS": "/data:/workspace",
    "MCP_READ_ONLY": "false"
  },
  
  "security_features": {
    "authentication": false,
    "encryption": false,
    "sandboxed": true,
    "permissions": [
      "Path traversal protection",
      "Symlink validation", 
      "Directory sandboxing",
      "File size limits",
      "Pattern-based exclusions",
      "Atomic file operations"
    ]
  },
  
  "documentation_url": "https://docs.mcp-platform.ai/templates/file-server",
  "source_url": "https://github.com/Data-Everything/mcp-server-templates/tree/main/file-server",
  "upstream_url": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
  "license": "MIT"
}
