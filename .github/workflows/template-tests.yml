name: Template Tests

on:
  push:
    paths:
      - 'templates/**'
  pull_request:
    paths:
      - 'templates/**'

jobs:
  detect-changed-templates:
    runs-on: ubuntu-latest
    outputs:
      changed-templates: ${{ steps.changes.outputs.templates }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed templates
      id: changes
      run: |
        # Get changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
        fi

        # Get changed template directories
        CHANGED_TEMPLATES=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep '^templates/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
        echo "templates=$CHANGED_TEMPLATES" >> $GITHUB_OUTPUT
        echo "Changed templates: $CHANGED_TEMPLATES"

  test-changed-templates:
    runs-on: ubuntu-latest
    needs: detect-changed-templates
    if: needs.detect-changed-templates.outputs.changed-templates != '[]'
    strategy:
      matrix:
        template: ${{ fromJson(needs.detect-changed-templates.outputs.changed-templates) }}
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Check if template has tests
      id: check-tests
      run: |
        if [ -d "templates/${{ matrix.template }}/tests" ]; then
          echo "has-tests=true" >> $GITHUB_OUTPUT
          echo "Template ${{ matrix.template }} has tests directory"
        else
          echo "has-tests=false" >> $GITHUB_OUTPUT
          echo "Template ${{ matrix.template }} does not have tests directory"
        fi

    - name: Run template unit tests
      if: steps.check-tests.outputs.has-tests == 'true'
      run: |
        cd templates/${{ matrix.template }}
        python -m pytest tests/ -v --tb=short -m "not integration"
      timeout-minutes: 10

    - name: Run template integration tests
      if: steps.check-tests.outputs.has-tests == 'true'
      run: |
        cd templates/${{ matrix.template }}
        python -m pytest tests/ -v --tb=short -m integration
      timeout-minutes: 15

    - name: Check test coverage
      if: steps.check-tests.outputs.has-tests == 'true'
      run: |
        cd templates/${{ matrix.template }}
        python -m pytest tests/ --cov=src --cov-report=term-missing --cov-fail-under=80
      continue-on-error: true

    - name: Validate template configuration
      run: |
        python -c "
        import json
        import sys
        from pathlib import Path

        template_dir = Path('templates/${{ matrix.template }}')
        config_file = template_dir / 'template.json'
        docs_file = template_dir / 'docs' / 'index.md'

        if not config_file.exists():
            print('❌ template.json not found')
            sys.exit(1)

        if not docs_file.exists():
            print('❌ docs/index.md not found')
            sys.exit(1)

        try:
            with open(config_file) as f:
                config = json.load(f)

            required_fields = ['id', 'name', 'description', 'version']
            for field in required_fields:
                if field not in config:
                    print(f'❌ Missing required field: {field}')
                    sys.exit(1)

            print('✅ Template configuration is valid')
            print('✅ Template documentation exists')
        except json.JSONDecodeError as e:
            print(f'❌ Invalid JSON in template.json: {e}')
            sys.exit(1)
        "

    - name: Test template server startup
      run: |
        cd templates/${{ matrix.template }}
        if [ -f "src/server.py" ]; then
          timeout 10s python -m src.server --help || echo "Server startup test completed"
        else
          echo "No server.py found, skipping startup test"
        fi
      timeout-minutes: 2
      continue-on-error: true

  all-template-tests:
    runs-on: ubuntu-latest
    needs: test-changed-templates
    if: always()
    steps:
    - name: Check all template tests passed
      run: |
        if [ "${{ needs.test-changed-templates.result }}" = "failure" ]; then
          echo "❌ Some template tests failed"
          exit 1
        elif [ "${{ needs.test-changed-templates.result }}" = "skipped" ]; then
          echo "⏭️ No template changes detected, tests skipped"
        else
          echo "✅ All template tests passed"
        fi
