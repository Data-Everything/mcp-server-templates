name: Template Tests

on:
  push:
    branches: [ main, develop, refactor ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job to detect which templates have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.changes.outputs.templates }}
      core: ${{ steps.changes.outputs.core }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Detect changes
      id: changes
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
        echo "Changed files: $CHANGED_FILES"

        # Detect changed templates
        TEMPLATES=$(echo "$CHANGED_FILES" | grep '^templates/' | cut -d'/' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
        echo "Changed templates: $TEMPLATES"
        echo "templates=$TEMPLATES" >> $GITHUB_OUTPUT

        # Detect core changes (always run core tests)
        CORE_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^(tests/(test_|utils)|scripts/|\.github/)' | wc -l)
        if [ "$CORE_CHANGED" -gt 0 ] || [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "core=true" >> $GITHUB_OUTPUT
        else
          echo "core=false" >> $GITHUB_OUTPUT
        fi

  # Core tests (configuration, deployment, etc.)
  test-core:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core == 'true'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run core configuration tests
      run: |
        pytest tests/test_configuration.py -v --tb=short

    - name: Run deployment tests
      run: |
        pytest tests/test_deployment*.py -v --tb=short

    - name: Run integration tests
      run: |
        pytest tests/test_*integration.py -v --tb=short

  # Template-specific tests
  test-templates:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.templates != ''
    strategy:
      fail-fast: false
      matrix:
        template: ${{ fromJson(format('["{0}"]', needs.detect-changes.outputs.templates)) }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install template dependencies
      run: |
        if [ -f "templates/${{ matrix.template }}/requirements.txt" ]; then
          pip install -r "templates/${{ matrix.template }}/requirements.txt"
        fi

    - name: Run template unit tests
      run: |
        if [ -d "tests/templates/${{ matrix.template }}" ]; then
          pytest "tests/templates/${{ matrix.template }}" -v --tb=short -m "unit or not integration"
        else
          echo "No tests found for template ${{ matrix.template }}"
        fi

    - name: Set up Docker for integration tests
      if: runner.os == 'Linux'
      uses: docker/setup-buildx-action@v2

    - name: Run template integration tests
      if: runner.os == 'Linux'
      run: |
        if [ -d "tests/templates/${{ matrix.template }}" ]; then
          pytest "tests/templates/${{ matrix.template }}" -v --tb=short -m "integration" || true
        fi

  # All templates test (runs on schedule or manual trigger)
  test-all-templates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Run all template tests
      run: |
        pytest tests/templates/ -v --tb=short

  # Test report aggregation
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-core, test-templates]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "Core tests: ${{ needs.test-core.result }}" >> $GITHUB_STEP_SUMMARY
        echo "Template tests: ${{ needs.test-templates.result }}" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test-core.result }}" = "failure" ] || [ "${{ needs.test-templates.result }}" = "failure" ]; then
          echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        fi
