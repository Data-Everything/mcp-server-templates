name: Build and Push MCP Template Images

on:
  push:
    branches: [ main ]
    paths: [ 'templates/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'templates/**' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: data-everything

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.changes.outputs.templates }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed templates
        id: changes
        run: |
          # Get list of all templates with Dockerfiles
          templates=()
          for template_dir in templates/*/; do
            template_name=$(basename "$template_dir")
            if [[ -f "$template_dir/Dockerfile" ]]; then
              templates+=("$template_name")
            fi
          done

          # On workflow_dispatch or main branch push, build all templates
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            changed_templates=("${templates[@]}")
            echo "Building all templates (manual trigger or main branch push)"
          else
            # For PRs, only build changed templates
            changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || git diff --name-only HEAD~1)
            changed_templates=()
            
            for template in "${templates[@]}"; do
              if echo "$changed_files" | grep -q "^templates/$template/"; then
                changed_templates+=("$template")
              fi
            done
          fi

          # Output results
          if [ ${#changed_templates[@]} -eq 0 ]; then
            echo "templates=[]" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No templates to build"
          else
            # Create JSON array for templates (more robust approach)
            templates_json="["
            for i in "${!changed_templates[@]}"; do
              if [ $i -gt 0 ]; then
                templates_json+=","
              fi
              templates_json+="\"${changed_templates[$i]}\""
            done
            templates_json+="]"
            echo "templates=$templates_json" >> $GITHUB_OUTPUT
            
            # Create matrix for parallel builds
            matrix_json="{\"include\":["
            for i in "${!changed_templates[@]}"; do
              if [ $i -gt 0 ]; then
                matrix_json+=","
              fi
              matrix_json+="{\"template\":\"${changed_templates[$i]}\"}"
            done
            matrix_json+="]}"
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          fi

          echo "Changed templates: ${changed_templates[*]}"

  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.templates != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract template metadata
        id: meta
        run: |
          template="${{ matrix.template }}"
          template_dir="templates/$template"
          
          # Read template.json if it exists
          if [[ -f "$template_dir/template.json" ]]; then
            version=$(jq -r '.version // "latest"' "$template_dir/template.json")
            description=$(jq -r '.description // ""' "$template_dir/template.json")
          else
            version="latest"
            description="MCP Server Template: $template"
          fi

          # Set image name
          image_name="mcp-$template"
          full_image="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/$image_name"

          echo "template=$template" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "description=$description" >> $GITHUB_OUTPUT
          echo "image_name=$image_name" >> $GITHUB_OUTPUT
          echo "full_image=$full_image" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.meta.outputs.full_image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.meta.outputs.version }}-{{sha}},enable={{is_default_branch}}
            type=raw,value=${{ steps.meta.outputs.version }},enable={{is_default_branch}},priority=1000
          labels: |
            org.opencontainers.image.title=MCP ${{ matrix.template }} Server
            org.opencontainers.image.description=${{ steps.meta.outputs.description }}
            org.opencontainers.image.vendor=Data Everything
            mcp.template=${{ matrix.template }}
            mcp.version=${{ steps.meta.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./templates/${{ matrix.template }}
          file: ./templates/${{ matrix.template }}/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update template.json with new image reference
        if: github.ref == 'refs/heads/main'
        run: |
          template="${{ matrix.template }}"
          template_dir="templates/$template"
          template_json="$template_dir/template.json"
          
          if [[ -f "$template_json" ]]; then
            # Update docker_image field to point to GHCR
            jq --arg image "${{ steps.meta.outputs.full_image }}" \
               '.docker_image = $image | .docker_tag = "latest"' \
               "$template_json" > "$template_json.tmp" && \
               mv "$template_json.tmp" "$template_json"
            
            echo "Updated $template_json with new image reference"
          fi

  update-template-configs:
    needs: [detect-changes, build-and-push]
    if: ${{ needs.detect-changes.outputs.templates != '[]' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update all template.json files
        run: |
          updated_files=()
          
          for template in $(echo '${{ needs.detect-changes.outputs.templates }}' | jq -r '.[]'); do
            template_dir="templates/$template"
            template_json="$template_dir/template.json"
            
            if [[ -f "$template_json" ]]; then
              # Update docker_image field to point to GHCR
              full_image="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/mcp-$template"
              
              # Create backup to compare changes
              cp "$template_json" "$template_json.backup"
              
              jq --arg image "$full_image" \
                 '.docker_image = $image | .docker_tag = "latest"' \
                 "$template_json" > "$template_json.tmp" && \
                 mv "$template_json.tmp" "$template_json"
              
              # Check if file actually changed
              if ! cmp -s "$template_json.backup" "$template_json"; then
                updated_files+=("$template_json")
                echo "Updated $template_json with image: $full_image"
              else
                echo "No changes needed for $template_json (already has correct image reference)"
              fi
              
              # Clean up backup
              rm -f "$template_json.backup"
            fi
          done

          # Commit changes if any files were updated
          if [ ${#updated_files[@]} -gt 0 ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add "${updated_files[@]}"
            git commit -m "chore: update template.json files with GHCR image references

            Updated templates: $(echo '${{ needs.detect-changes.outputs.templates }}' | jq -r 'join(", ")')
            
            - Automated update from GitHub Actions
            - Images pushed to ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}"
            git push
            echo "Successfully committed changes to ${#updated_files[@]} template.json files"
          else
            echo "No template.json files needed updates - all already have correct image references"
          fi

  summary:
    needs: [detect-changes, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          if [[ "${{ needs.detect-changes.outputs.templates }}" == "[]" ]]; then
            echo "## 🔍 No templates changed" >> $GITHUB_STEP_SUMMARY
            echo "No MCP template images need to be built." >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🚀 MCP Template Build Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Built Templates:" >> $GITHUB_STEP_SUMMARY
            
            for template in $(echo '${{ needs.detect-changes.outputs.templates }}' | jq -r '.[]'); do
              image_url="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/mcp-$template:latest"
              echo "- **$template**: \`$image_url\`" >> $GITHUB_STEP_SUMMARY
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Registry:" >> $GITHUB_STEP_SUMMARY
            echo "Images are available at: [${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}](https://${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }})" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ All images built and pushed successfully!" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "❌ Some builds failed. Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            fi
          fi
