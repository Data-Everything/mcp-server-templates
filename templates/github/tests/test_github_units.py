#!/usr/bin/env python3
"""
Unit tests for github template.

Auto-generated by TemplateTestGenerator.
"""

import json
import sys
from pathlib import Path
from unittest.mock import Mock, patch

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from mcp_template import TemplateDiscovery


class TestGithubTemplate:
    """Unit tests for github template structure and configuration."""

    @pytest.fixture
    def template_config(self):
        """Template configuration fixture."""
        return {
            "name": "GitHub MCP Server",
            "description": "Official GitHub MCP server that provides comprehensive GitHub repository management, issue tracking, pull request handling, and repository exploration. Enables AI assistants to interact with GitHub's API for searching repositories, managing issues, creating PRs, and exploring codebases.",
            "docker_image": "github/github-mcp-server",
            "docker_tag": "latest",
            "config_schema": {
                "type": "object",
                "properties": {
                    "github_token": {
                        "type": "string",
                        "title": "GitHub Personal Access Token",
                        "description": "Your GitHub Personal Access Token with appropriate permissions for repository access",
                        "pattern": "^gh[pousr]_[A-Za-z0-9_]{36,255}$",
                    },
                    "default_owner": {
                        "type": "string",
                        "title": "Default Repository Owner",
                        "description": "Default GitHub username or organization name (optional)",
                        "default": "",
                    },
                    "default_repo": {
                        "type": "string",
                        "title": "Default Repository Name",
                        "description": "Default repository name to work with (optional)",
                        "default": "",
                    },
                    "api_base_url": {
                        "type": "string",
                        "title": "GitHub API Base URL",
                        "description": "GitHub API base URL (use for GitHub Enterprise)",
                        "default": "https://api.github.com",
                        "format": "uri",
                    },
                    "max_search_results": {
                        "type": "integer",
                        "title": "Maximum Search Results",
                        "description": "Maximum number of results to return from search operations",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100,
                    },
                    "enable_webhook_events": {
                        "type": "boolean",
                        "title": "Enable Webhook Events",
                        "description": "Enable webhook event processing for real-time updates",
                        "default": False,
                    },
                    "rate_limit_requests": {
                        "type": "integer",
                        "title": "Rate Limit (requests/hour)",
                        "description": "Maximum API requests per hour to respect GitHub rate limits",
                        "default": 5000,
                        "minimum": 100,
                        "maximum": 15000,
                    },
                },
                "required": ["github_token"],
            },
            "default_config": {
                "github_token": "",
                "default_owner": "",
                "default_repo": "",
                "api_base_url": "https://api.github.com",
                "max_search_results": 30,
                "enable_webhook_events": False,
                "rate_limit_requests": 5000,
            },
            "exposed_port": 8080,
            "environment_variables": {
                "GITHUB_TOKEN": "${github_token}",
                "GITHUB_API_URL": "${api_base_url}",
                "DEFAULT_OWNER": "${default_owner}",
                "DEFAULT_REPO": "${default_repo}",
                "MAX_SEARCH_RESULTS": "${max_search_results}",
                "RATE_LIMIT_REQUESTS": "${rate_limit_requests}",
                "MCP_PORT": "8080",
                "MCP_HOST": "0.0.0.0",
            },
            "volume_mounts": [],
            "version": "1.0.0",
            "author": "GitHub",
            "documentation_url": "https://github.com/github/github-mcp-server",
            "source_url": "https://github.com/github/github-mcp-server",
            "is_active": True,
        }

    def test_template_structure(self):
        """Test that template has required files and structure."""
        template_dir = Path(__file__).parent.parent / "templates" / "github"

        required_files = ["template.json", "Dockerfile", "README.md"]
        for file_name in required_files:
            file_path = template_dir / file_name
            assert file_path.exists(), f"Required file missing: {file_name}"

    def test_template_json_schema(self, template_config):
        """Test template.json has required fields."""
        required_fields = ["name", "description", "docker_image", "config_schema"]
        for field in required_fields:
            assert field in template_config, f"Required field missing: {field}"

    def test_docker_image_format(self, template_config):
        """Test Docker image follows naming conventions."""
        docker_image = template_config.get("docker_image", "")
        assert docker_image.startswith(
            "dataeverything/mcp-"
        ), "Docker image should use dataeverything/mcp- prefix"

    def test_config_schema_validation(self, template_config):
        """Test configuration schema is valid."""
        config_schema = template_config.get("config_schema", {})
        assert "properties" in config_schema, "Config schema must have properties"

        # Test environment mappings
        properties = config_schema.get("properties", {})
        for prop_name, prop_config in properties.items():
            if "env_mapping" in prop_config:
                env_mapping = prop_config["env_mapping"]
                assert env_mapping.startswith(
                    "MCP_"
                ), f"Environment variable {env_mapping} should start with MCP_"

    def test_template_discovery(self):
        """Test that template is discoverable by TemplateDiscovery."""
        discovery = TemplateDiscovery()
        templates = discovery.discover_templates()

        assert "github" in templates, "Template should be discoverable"

        template = templates["github"]
        assert template["name"] == "GitHub MCP Server", "Template name should match"
