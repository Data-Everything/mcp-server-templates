#!/usr/bin/env python3
"""
Unit tests for file-server template.

Auto-generated by TemplateTestGenerator.
"""

import json
import sys
from pathlib import Path
from unittest.mock import Mock, patch

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from mcp_template import TemplateDiscovery


class TestFileServerTemplate:
    """Unit tests for file-server template structure and configuration."""

    @pytest.fixture
    def template_config(self):
        """Template configuration fixture."""
        return {
            "name": "File Server MCP",
            "description": "Secure file system access for AI assistants using the official MCP filesystem server with additional platform integration and configuration options.",
            "version": "1.0.1",
            "author": "MCP Platform",
            "category": "Utilities",
            "tags": ["filesystem", "files", "storage", "security", "utilities"],
            "base_server": "@modelcontextprotocol/server-filesystem",
            "base_version": "latest",
            "docker_image": "dataeverything/mcp-file-server",
            "docker_tag": "latest",
            "config_schema": {
                "type": "object",
                "properties": {
                    "allowed_directories": {
                        "type": "array",
                        "title": "Allowed Directories",
                        "description": "List of directories the server can access. Paths will be mounted and validated for security.",
                        "items": {"type": "string"},
                        "default": ["/data"],
                        "env_mapping": "MCP_ALLOWED_DIRS",
                        "env_separator": ":",
                    },
                    "read_only_mode": {
                        "type": "boolean",
                        "title": "Read-Only Mode",
                        "description": "Enable read-only mode to prevent any file modifications",
                        "default": False,
                        "env_mapping": "MCP_READ_ONLY",
                    },
                    "enable_symlinks": {
                        "type": "boolean",
                        "title": "Enable Symlink Resolution",
                        "description": "Allow following symbolic links (with security validation)",
                        "default": True,
                        "env_mapping": "MCP_ENABLE_SYMLINKS",
                    },
                    "max_file_size": {
                        "type": "integer",
                        "title": "Max File Size (MB)",
                        "description": "Maximum file size for read operations in megabytes",
                        "default": 100,
                        "minimum": 1,
                        "maximum": 1000,
                        "env_mapping": "MCP_MAX_FILE_SIZE",
                    },
                    "exclude_patterns": {
                        "type": "array",
                        "title": "Exclude Patterns",
                        "description": "Glob patterns for files/directories to exclude from operations",
                        "items": {"type": "string"},
                        "default": ["**/.git/**", "**/node_modules/**", "**/.env*"],
                        "env_mapping": "MCP_EXCLUDE_PATTERNS",
                        "env_separator": ",",
                    },
                    "log_level": {
                        "type": "string",
                        "title": "Log Level",
                        "description": "Logging level for the server",
                        "enum": ["debug", "info", "warn", "error"],
                        "default": "info",
                        "env_mapping": "MCP_LOG_LEVEL",
                    },
                    "enable_audit": {
                        "type": "boolean",
                        "title": "Enable Audit Logging",
                        "description": "Enable detailed audit logging of file operations",
                        "default": True,
                        "env_mapping": "MCP_ENABLE_AUDIT",
                    },
                    "max_concurrent_operations": {
                        "type": "integer",
                        "title": "Max Concurrent Operations",
                        "description": "Maximum number of concurrent file operations",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 100,
                        "env_mapping": "MCP_MAX_CONCURRENT_OPS",
                    },
                    "timeout_ms": {
                        "type": "integer",
                        "title": "Operation Timeout (ms)",
                        "description": "Timeout for file operations in milliseconds",
                        "default": 30000,
                        "minimum": 1000,
                        "maximum": 300000,
                        "env_mapping": "MCP_TIMEOUT_MS",
                    },
                    "cache_enabled": {
                        "type": "boolean",
                        "title": "Enable Caching",
                        "description": "Enable file content caching for better performance",
                        "default": True,
                        "env_mapping": "MCP_CACHE_ENABLED",
                    },
                    "metrics_enabled": {
                        "type": "boolean",
                        "title": "Enable Metrics",
                        "description": "Enable performance and health metrics collection",
                        "default": True,
                        "env_mapping": "MCP_METRICS_ENABLED",
                    },
                },
                "required": ["allowed_directories"],
            },
            "capabilities": [
                {
                    "name": "File Operations",
                    "description": "Read, write, and edit files with security validation",
                    "example": "Read configuration files, create documents, update source code",
                },
                {
                    "name": "Directory Management",
                    "description": "List, create, and navigate directory structures",
                    "example": "Browse project folders, create new directories, organize files",
                },
                {
                    "name": "File Search",
                    "description": "Search for files by name, extension, or content patterns",
                    "example": "Find all .js files, locate configuration files, search by content",
                },
                {
                    "name": "Security & Validation",
                    "description": "Path traversal protection and security validation",
                    "example": "Prevent access to system files, validate file paths, enforce permissions",
                },
            ],
            "tools": [
                {
                    "name": "read_file",
                    "description": "Read complete contents of a file with support for head/tail operations",
                    "parameters": [
                        {
                            "name": "path",
                            "description": "File path to read",
                            "required": True,
                        },
                        {
                            "name": "encoding",
                            "description": "File encoding (default: utf-8)",
                            "required": False,
                        },
                    ],
                },
                {
                    "name": "write_file",
                    "description": "Create new file or overwrite existing with security checks",
                    "parameters": [
                        {
                            "name": "path",
                            "description": "File path to write",
                            "required": True,
                        },
                        {
                            "name": "content",
                            "description": "File content",
                            "required": True,
                        },
                        {
                            "name": "mode",
                            "description": "File permissions (default: 644)",
                            "required": False,
                        },
                    ],
                },
                {
                    "name": "list_directory",
                    "description": "List directory contents with file type indicators",
                    "parameters": [
                        {
                            "name": "path",
                            "description": "Directory path to list",
                            "required": True,
                        },
                        {
                            "name": "recursive",
                            "description": "Include subdirectories",
                            "required": False,
                        },
                    ],
                },
                {
                    "name": "search_files",
                    "description": "Recursively search for files matching patterns with exclusion support",
                    "parameters": [
                        {
                            "name": "pattern",
                            "description": "Search pattern or glob",
                            "required": True,
                        },
                        {
                            "name": "path",
                            "description": "Search root path",
                            "required": False,
                        },
                        {
                            "name": "exclude",
                            "description": "Exclusion patterns",
                            "required": False,
                        },
                    ],
                },
            ],
            "ports": [
                {
                    "container": 8000,
                    "description": "MCP server stdio interface (typically not exposed)",
                }
            ],
            "volumes": [
                {"mount": "/data", "description": "Primary file storage directory"},
                {
                    "mount": "/workspace",
                    "description": "Additional workspace directory (optional)",
                },
            ],
            "environment_variables": {
                "NODE_ENV": "production",
                "MCP_ALLOWED_DIRS": "/data:/workspace",
                "MCP_READ_ONLY": "False",
                "MCP_MAX_FILE_SIZE": "104857600",
                "MCP_ENABLE_SYMLINKS": "True",
                "MCP_EXCLUDE_PATTERNS": "**/.git/**,**/node_modules/**,**/.env*",
                "MCP_LOG_LEVEL": "info",
                "MCP_ENABLE_AUDIT": "True",
                "MCP_LOG_FILE": "/logs/file-server.log",
                "MCP_MAX_LOG_SIZE": "10MB",
                "MCP_MAX_LOG_FILES": "5",
                "MCP_MAX_CONCURRENT_OPS": "10",
                "MCP_TIMEOUT_MS": "30000",
                "MCP_CACHE_ENABLED": "True",
                "MCP_CACHE_TTL_MS": "300000",
                "MCP_HEALTH_CHECK_INTERVAL": "30",
                "MCP_METRICS_ENABLED": "True",
                "MCP_MEMORY_THRESHOLD_MB": "512",
                "MCP_DISK_THRESHOLD_PCT": "90",
                "MCP_ERROR_RATE_THRESHOLD": "0.05",
            },
            "security_features": {
                "authentication": False,
                "encryption": False,
                "sandboxed": True,
                "permissions": [
                    "Path traversal protection",
                    "Symlink validation",
                    "Directory sandboxing",
                    "File size limits",
                    "Pattern-based exclusions",
                    "Atomic file operations",
                ],
            },
            "documentation_url": "https://docs.mcp-platform.ai/templates/file-server",
            "source_url": "https://github.com/Data-Everything/mcp-server-templates/tree/main/file-server",
            "upstream_url": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
            "license": "MIT",
        }

    def test_template_structure(self):
        """Test that template has required files and structure."""
        template_dir = Path(__file__).parent.parent / "templates" / "file-server"

        required_files = ["template.json", "Dockerfile", "README.md"]
        for file_name in required_files:
            file_path = template_dir / file_name
            assert file_path.exists(), f"Required file missing: {file_name}"

    def test_template_json_schema(self, template_config):
        """Test template.json has required fields."""
        required_fields = ["name", "description", "docker_image", "config_schema"]
        for field in required_fields:
            assert field in template_config, f"Required field missing: {field}"

    def test_docker_image_format(self, template_config):
        """Test Docker image follows naming conventions."""
        docker_image = template_config.get("docker_image", "")
        assert docker_image.startswith(
            "dataeverything/mcp-"
        ), "Docker image should use dataeverything/mcp- prefix"

    def test_config_schema_validation(self, template_config):
        """Test configuration schema is valid."""
        config_schema = template_config.get("config_schema", {})
        assert "properties" in config_schema, "Config schema must have properties"

        # Test environment mappings
        properties = config_schema.get("properties", {})
        for prop_name, prop_config in properties.items():
            if "env_mapping" in prop_config:
                env_mapping = prop_config["env_mapping"]
                assert env_mapping.startswith(
                    "MCP_"
                ), f"Environment variable {env_mapping} should start with MCP_"

    def test_capabilities_defined(self, template_config):
        """Test that template capabilities are properly defined."""
        capabilities = template_config.get("capabilities", [])
        assert len(capabilities) > 0, "Template should define capabilities"

        for capability in capabilities:
            assert "name" in capability, "Capability must have name"
            assert "description" in capability, "Capability must have description"

    def test_template_discovery(self):
        """Test that template is discoverable by TemplateDiscovery."""
        discovery = TemplateDiscovery()
        templates = discovery.discover_templates()

        assert "file-server" in templates, "Template should be discoverable"

        template = templates["file-server"]
        assert template["name"] == "File Server MCP", "Template name should match"
