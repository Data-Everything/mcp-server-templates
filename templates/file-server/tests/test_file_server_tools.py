#!/usr/bin/env python3
"""
Tool-specific tests for file-server template.

Auto-generated by TemplateTestGenerator.
Tests specific tools and capabilities provided by this template.
"""

import asyncio
import sys
from pathlib import Path

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from tests.utils.mcp_test_utils import TemplateTestContainer


@pytest.mark.integration
@pytest.mark.docker
class TestFileServerTools:
    """Test specific tools and capabilities of file-server template."""

    def test_file_operations_capability(self):
        """Test File Operations capability."""
        config = {
            "allowed_directories": ["/data"],
            "read_only_mode": False,
            "enable_symlinks": True,
            "max_file_size": 100,
            "exclude_patterns": ["**/.git/**", "**/node_modules/**", "**/.env*"],
            "log_level": "info",
            "enable_audit": True,
            "max_concurrent_operations": 10,
            "timeout_ms": 30000,
            "cache_enabled": True,
            "metrics_enabled": True,
        }

        with TemplateTestContainer("file-server", config) as container:
            # Wait for server initialization
            import time

            time.sleep(3)

            # Test that capability is available
            logs = container.get_logs()

            # Look for capability-related initialization
            capability_indicators = ["File Operations", "tool", "capability"]
            found = [
                indicator
                for indicator in capability_indicators
                if indicator.lower() in logs.lower()
            ]

            # At minimum, server should start successfully
            assert (
                container.container_id
            ), "Container should be running for File Operations capability"

    def test_directory_management_capability(self):
        """Test Directory Management capability."""
        config = {
            "allowed_directories": ["/data"],
            "read_only_mode": False,
            "enable_symlinks": True,
            "max_file_size": 100,
            "exclude_patterns": ["**/.git/**", "**/node_modules/**", "**/.env*"],
            "log_level": "info",
            "enable_audit": True,
            "max_concurrent_operations": 10,
            "timeout_ms": 30000,
            "cache_enabled": True,
            "metrics_enabled": True,
        }

        with TemplateTestContainer("file-server", config) as container:
            # Wait for server initialization
            import time

            time.sleep(3)

            # Test that capability is available
            logs = container.get_logs()

            # Look for capability-related initialization
            capability_indicators = ["Directory Management", "tool", "capability"]
            found = [
                indicator
                for indicator in capability_indicators
                if indicator.lower() in logs.lower()
            ]

            # At minimum, server should start successfully
            assert (
                container.container_id
            ), "Container should be running for Directory Management capability"

    def test_file_search_capability(self):
        """Test File Search capability."""
        config = {
            "allowed_directories": ["/data"],
            "read_only_mode": False,
            "enable_symlinks": True,
            "max_file_size": 100,
            "exclude_patterns": ["**/.git/**", "**/node_modules/**", "**/.env*"],
            "log_level": "info",
            "enable_audit": True,
            "max_concurrent_operations": 10,
            "timeout_ms": 30000,
            "cache_enabled": True,
            "metrics_enabled": True,
        }

        with TemplateTestContainer("file-server", config) as container:
            # Wait for server initialization
            import time

            time.sleep(3)

            # Test that capability is available
            logs = container.get_logs()

            # Look for capability-related initialization
            capability_indicators = ["File Search", "tool", "capability"]
            found = [
                indicator
                for indicator in capability_indicators
                if indicator.lower() in logs.lower()
            ]

            # At minimum, server should start successfully
            assert (
                container.container_id
            ), "Container should be running for File Search capability"

    def test_security_and_validation_capability(self):
        """Test Security & Validation capability."""
        config = {
            "allowed_directories": ["/data"],
            "read_only_mode": False,
            "enable_symlinks": True,
            "max_file_size": 100,
            "exclude_patterns": ["**/.git/**", "**/node_modules/**", "**/.env*"],
            "log_level": "info",
            "enable_audit": True,
            "max_concurrent_operations": 10,
            "timeout_ms": 30000,
            "cache_enabled": True,
            "metrics_enabled": True,
        }

        with TemplateTestContainer("file-server", config) as container:
            # Wait for server initialization
            import time

            time.sleep(3)

            # Test that capability is available
            logs = container.get_logs()

            # Look for capability-related initialization
            capability_indicators = ["Security & Validation", "tool", "capability"]
            found = [
                indicator
                for indicator in capability_indicators
                if indicator.lower() in logs.lower()
            ]

            # At minimum, server should start successfully
            assert (
                container.container_id
            ), "Container should be running for Security & Validation capability"

    def test_tool_registration(self):
        """Test that all expected tools are registered."""
        config = {
            "allowed_directories": ["/data"],
            "read_only_mode": False,
            "enable_symlinks": True,
            "max_file_size": 100,
            "exclude_patterns": ["**/.git/**", "**/node_modules/**", "**/.env*"],
            "log_level": "info",
            "enable_audit": True,
            "max_concurrent_operations": 10,
            "timeout_ms": 30000,
            "cache_enabled": True,
            "metrics_enabled": True,
        }

        with TemplateTestContainer("file-server", config) as container:
            # Server should start and register tools
            import time

            time.sleep(3)

            logs = container.get_logs()

            # Look for tool registration indicators
            tool_indicators = ["tool", "register", "available", "handler"]
            found = [
                indicator for indicator in tool_indicators if indicator in logs.lower()
            ]

            # Should have some indication of tool setup
            assert (
                len(found) > 0 or "FastMCP" in logs
            ), f"Should show tool registration. Logs: {logs}"
