#!/usr/bin/env python3
"""
Unit tests for demo template.

Auto-generated by TemplateTestGenerator.
"""

import json
import sys
from pathlib import Path
from unittest.mock import Mock, patch

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from mcp_template import TemplateDiscovery


class TestDemoTemplate:
    """Unit tests for demo template structure and configuration."""

    @pytest.fixture
    def template_config(self):
        """Template configuration fixture."""
        return {
            "name": "Demo Hello MCP Server",
            "description": "A simple demonstration MCP server that provides greeting tools",
            "docker_image": "dataeverything/mcp-demo-hello",
            "docker_tag": "latest",
            "config_schema": {
                "type": "object",
                "properties": {
                    "hello_from": {
                        "type": "string",
                        "title": "Greeting Source",
                        "description": "Name or message to include in greetings",
                        "default": "MCP Platform",
                        "env_mapping": "MCP_HELLO_FROM",
                    },
                    "log_level": {
                        "type": "string",
                        "title": "Log Level",
                        "description": "Logging level for the server",
                        "enum": ["debug", "info", "warn", "error"],
                        "default": "info",
                        "env_mapping": "MCP_LOG_LEVEL",
                    },
                },
            },
            "capabilities": [
                {
                    "name": "Greeting Tools",
                    "description": "Generate personalized greetings and messages",
                    "example": "Say hello, create custom messages, demonstrate MCP capabilities",
                }
            ],
            "tools": [
                {
                    "name": "say_hello",
                    "description": "Generate a personalized greeting message",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the person to greet (optional)",
                            "required": False,
                        }
                    ],
                },
                {
                    "name": "get_server_info",
                    "description": "Get information about the demo server",
                    "parameters": [],
                },
            ],
        }

    def test_template_structure(self):
        """Test that template has required files and structure."""
        template_dir = Path(__file__).parent.parent / "templates" / "demo"

        required_files = ["template.json", "Dockerfile", "README.md"]
        for file_name in required_files:
            file_path = template_dir / file_name
            assert file_path.exists(), f"Required file missing: {file_name}"

    def test_template_json_schema(self, template_config):
        """Test template.json has required fields."""
        required_fields = ["name", "description", "docker_image", "config_schema"]
        for field in required_fields:
            assert field in template_config, f"Required field missing: {field}"

    def test_docker_image_format(self, template_config):
        """Test Docker image follows naming conventions."""
        docker_image = template_config.get("docker_image", "")
        assert docker_image.startswith(
            "dataeverything/mcp-"
        ), "Docker image should use dataeverything/mcp- prefix"

    def test_config_schema_validation(self, template_config):
        """Test configuration schema is valid."""
        config_schema = template_config.get("config_schema", {})
        assert "properties" in config_schema, "Config schema must have properties"

        # Test environment mappings
        properties = config_schema.get("properties", {})
        for prop_name, prop_config in properties.items():
            if "env_mapping" in prop_config:
                env_mapping = prop_config["env_mapping"]
                assert env_mapping.startswith(
                    "MCP_"
                ), f"Environment variable {env_mapping} should start with MCP_"

    def test_capabilities_defined(self, template_config):
        """Test that template capabilities are properly defined."""
        capabilities = template_config.get("capabilities", [])
        assert len(capabilities) > 0, "Template should define capabilities"

        for capability in capabilities:
            assert "name" in capability, "Capability must have name"
            assert "description" in capability, "Capability must have description"

    def test_template_discovery(self):
        """Test that template is discoverable by TemplateDiscovery."""
        discovery = TemplateDiscovery()
        templates = discovery.discover_templates()

        assert "demo" in templates, "Template should be discoverable"

        template = templates["demo"]
        assert template["name"] == "Demo Hello MCP Server", "Template name should match"
