#!/usr/bin/env python3
"""
Tool-specific tests for demo template.

Auto-generated by TemplateTestGenerator.
Tests specific tools and capabilities provided by this template.
"""

import asyncio
import sys
from pathlib import Path

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from tests.utils.mcp_test_utils import TemplateTestContainer


@pytest.mark.integration
@pytest.mark.docker
class TestDemoTools:
    """Test specific tools and capabilities of demo template."""

    def test_greeting_tools_capability(self):
        """Test Greeting Tools capability."""
        config = {"hello_from": "MCP Platform", "log_level": "info"}

        with TemplateTestContainer("demo", config) as container:
            # Wait for server initialization
            import time

            time.sleep(3)

            # Test that capability is available
            logs = container.get_logs()

            # Look for capability-related initialization
            capability_indicators = ["Greeting Tools", "tool", "capability"]
            found = [
                indicator
                for indicator in capability_indicators
                if indicator.lower() in logs.lower()
            ]

            # At minimum, server should start successfully
            assert (
                container.container_id
            ), "Container should be running for Greeting Tools capability"

    def test_tool_registration(self):
        """Test that all expected tools are registered."""
        config = {"hello_from": "MCP Platform", "log_level": "info"}

        with TemplateTestContainer("demo", config) as container:
            # Server should start and register tools
            import time

            time.sleep(3)

            logs = container.get_logs()

            # Look for tool registration indicators
            tool_indicators = ["tool", "register", "available", "handler"]
            found = [
                indicator for indicator in tool_indicators if indicator in logs.lower()
            ]

            # Should have some indication of tool setup
            assert (
                len(found) > 0 or "FastMCP" in logs
            ), f"Should show tool registration. Logs: {logs}"
