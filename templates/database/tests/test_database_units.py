#!/usr/bin/env python3
"""
Unit tests for database template.

Auto-generated by TemplateTestGenerator.
"""

import json
import sys
from pathlib import Path
from unittest.mock import Mock, patch

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from mcp_template import TemplateDiscovery


class TestDatabaseTemplate:
    """Unit tests for database template structure and configuration."""

    @pytest.fixture
    def template_config(self):
        """Template configuration fixture."""
        return {
            "name": "Database Connector MCP",
            "description": "A powerful MCP server that provides database connectivity and query capabilities. Supports multiple database types including PostgreSQL, MySQL, and SQLite.",
            "docker_image": "mcpplatform/database-connector-mcp",
            "docker_tag": "v1.5.2",
            "config_schema": {
                "type": "object",
                "properties": {
                    "database_type": {
                        "type": "string",
                        "title": "Database Type",
                        "description": "Type of database to connect to",
                        "enum": ["postgresql", "mysql", "sqlite"],
                        "default": "postgresql",
                    },
                    "database_url": {
                        "type": "string",
                        "title": "Database URL",
                        "description": "Database connection URL (leave empty for SQLite file path)",
                        "default": "",
                    },
                    "sqlite_file_path": {
                        "type": "string",
                        "title": "SQLite File Path",
                        "description": "Path to SQLite database file (only for SQLite)",
                        "default": "/data/database.db",
                    },
                    "connection_pool_size": {
                        "type": "integer",
                        "title": "Connection Pool Size",
                        "description": "Maximum number of database connections",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 100,
                    },
                    "query_timeout": {
                        "type": "integer",
                        "title": "Query Timeout (seconds)",
                        "description": "Maximum time to wait for query execution",
                        "default": 30,
                        "minimum": 5,
                        "maximum": 300,
                    },
                    "read_only": {
                        "type": "boolean",
                        "title": "Read Only Mode",
                        "description": "Enable read-only mode to prevent data modifications",
                        "default": False,
                    },
                },
                "required": ["database_type"],
            },
            "default_config": {
                "database_type": "postgresql",
                "database_url": "",
                "sqlite_file_path": "/data/database.db",
                "connection_pool_size": 10,
                "query_timeout": 30,
                "read_only": False,
            },
            "exposed_port": 8080,
            "environment_variables": {
                "MCP_PORT": "8080",
                "MCP_HOST": "0.0.0.0",
                "DB_CONNECTOR_MODE": "secure",
            },
            "volume_mounts": ["/app/data:/data"],
            "version": "1.5.2",
            "author": "Database Solutions Ltd.",
            "documentation_url": "https://docs.dbsolutions.com/mcp-connector",
            "source_url": "https://github.com/dbsolutions/mcp-db-connector",
        }

    def test_template_structure(self):
        """Test that template has required files and structure."""
        template_dir = Path(__file__).parent.parent / "templates" / "database"

        required_files = ["template.json", "Dockerfile", "README.md"]
        for file_name in required_files:
            file_path = template_dir / file_name
            assert file_path.exists(), f"Required file missing: {file_name}"

    def test_template_json_schema(self, template_config):
        """Test template.json has required fields."""
        required_fields = ["name", "description", "docker_image", "config_schema"]
        for field in required_fields:
            assert field in template_config, f"Required field missing: {field}"

    def test_docker_image_format(self, template_config):
        """Test Docker image follows naming conventions."""
        docker_image = template_config.get("docker_image", "")
        assert docker_image.startswith(
            "dataeverything/mcp-"
        ), "Docker image should use dataeverything/mcp- prefix"

    def test_config_schema_validation(self, template_config):
        """Test configuration schema is valid."""
        config_schema = template_config.get("config_schema", {})
        assert "properties" in config_schema, "Config schema must have properties"

        # Test environment mappings
        properties = config_schema.get("properties", {})
        for prop_name, prop_config in properties.items():
            if "env_mapping" in prop_config:
                env_mapping = prop_config["env_mapping"]
                assert env_mapping.startswith(
                    "MCP_"
                ), f"Environment variable {env_mapping} should start with MCP_"

    def test_template_discovery(self):
        """Test that template is discoverable by TemplateDiscovery."""
        discovery = TemplateDiscovery()
        templates = discovery.discover_templates()

        assert "database" in templates, "Template should be discoverable"

        template = templates["database"]
        assert (
            template["name"] == "Database Connector MCP"
        ), "Template name should match"
